from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart

from data.config import channels
from keyboards.inline.subscribe import create_link
from loader import dp, bot
from utils.db_api import quick_commands as commands

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery
from emoji import emojize

from keyboards.inline.metabolism import metabolism_gender_markup, metabolism_activity_markup, activity_callback, \
    gender_callback, target_callback, metabolism_target_markup, global_menu, change_markup, back_kb
from loader import dp
from states.Metabolism import Metabolism_state
from utils.misc import metabolism_calculation, rate_limit, subscription


@dp.callback_query_handler(text_contains="yes")
async def buying_pear(call: CallbackQuery):
    user = await commands.select_user(id=call.from_user.id)
    await commands.update_user(id=call.from_user.id)
    await call.message.edit_text(f"<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:</b>",
                                 reply_markup=metabolism_gender_markup)


@dp.callback_query_handler(text_contains="no")
async def buying_pear(call: CallbackQuery):
    await call.message.edit_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π–≤—Å—Ç–∏—è",
                         reply_markup=global_menu)

@dp.callback_query_handler(text_contains="back", state="*")
async def buying_pear(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π–≤—Å—Ç–∏—è",
                                      reply_markup=global_menu)
    await state.finish()

@dp.callback_query_handler(text_contains="today")
async def buying_pear(call: CallbackQuery, state: FSMContext):
    await call.answer()
    user = await commands.select_user(id=call.from_user.id)
    kkal = user.kkal
    now = int(kkal)-int(user.today)
    if kkal == 0:
        await call.message.edit_text( f"<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π!</b>",reply_markup=global_menu)
    else:
        mess = await call.message.edit_text(f"<code>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —Ü–∏—Ñ—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 300).</code>\n\n"
                                        f"<b>–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞</b> {kkal} –ö–ö–∞–ª\n\n"
                                        f"<b>–°—ä–µ–¥–µ–Ω–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b> {user.today} –ö–ö–∞–ª\n"
                                        f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {now} –ö–ö–∞–ª –¥–æ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã\n\n"
                                        f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b>üëá\n", reply_markup=back_kb)

        m_id = mess.message_id
        await state.update_data(m_id=m_id)
        await state.set_state("today")

@dp.message_handler(state="today")
async def answer_age(message: types.Message, state: FSMContext):
    answer = message.text
    print(answer)
    data=await state.get_data()
    m_id = data.get("m_id")
    print(m_id)
    user = await commands.select_user(id=message.from_user.id)
    kkal = user.kkal
    print(user.today)
    now = int(kkal) - int(user.today)

    if answer.isdigit():
        await commands.update_user_today(id=message.from_user.id, today=int(answer))
        # await bot.delete_message(message_id=m_id, chat_id=message.from_user.id)
        today = int(user.today)+int(message.text)
        await state.finish()
        if int(now) == 0:
            await bot.edit_message_text(message_id=m_id, chat_id=message.from_user.id,text=
            f"<b>–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –≤–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ -</b> {kkal} –ö–ö–∞–ª\n\n"
                                 f"<b>–°—ä–µ–¥–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è</b> {today} –ö–ö–∞–ª\n\n"
                                 f"<b>–í—ã —É–∂–µ —Å—ä–µ–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!</b>\n\n"
                                 f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b>üëá",
                                reply_markup=back_kb)
        elif int(now) > int(kkal):
            await bot.edit_message_text(message_id=m_id, chat_id=message.from_user.id, text=
            f"<b>–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –≤–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ -</b> {kkal} –ö–ö–∞–ª\n\n"
                                 f"<b>–°—ä–µ–¥–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è</b> {today} –ö–ö–∞–ª\n\n"
                                 f"<b>–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –Ω–∞</b> {int(kkal)-int(today)}!\n\n"
                                        f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b>üëá",reply_markup=back_kb)
        else:
            await bot.edit_message_text(message_id=m_id, chat_id=message.from_user.id, text=
            f"<b>–ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –≤–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ -</b> {kkal} –ö–ö–∞–ª\n\n"
                             f"<b>–°—ä–µ–¥–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è</b> {today} –ö–ö–∞–ª\n\n"
                             f"<b>–û—Å—Ç–∞–ª–æ—Å—å</b> {int(kkal)-int(today)} <b>–ö–ö–∞–ª –¥–æ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã</b>\n\n"
                            f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b>üëá",reply_markup=back_kb)
    else:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–∞–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É -  –Ω–∞–∑–∞–¥!")
        return



@dp.callback_query_handler(text_contains="count")
async def buying_pear(call: CallbackQuery):
    user = await commands.select_user(id=call.from_user.id)
    kkal = user.kkal
    if user.kkal > 0:
        if user.target == "–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å":
            prot = int(user.weight) * 2
            fat = int(user.weight) * 0.5
            ugleodi = int(user.weight) * 2.2
        elif user.target == "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å":
            prot = int(user.weight) * 3.5
            fat = int(user.weight) * 1
            ugleodi = int(user.weight) * 3.2
        else:
            prot = int(user.weight) * 2.5
            fat = int(user.weight) * 0.7
            ugleodi = int(user.weight) * 3.2
        await call.message.edit_text(
                             f"<b>–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–ª—è –≤–∞—Å</b> - {kkal} –ö–ö–∞–ª \n\n"
                             f"<b>–ë–µ–ª–∫–∏:</b> {prot}\n"
                             f"<b>–ñ–∏—Ä—ã:</b> {fat}\n"
                             f"<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {int(ugleodi)}\n")
        await call.message.answer("–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è?",reply_markup=change_markup)
    else:
        await call.message.edit_text(
                         f"<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª</b>",
                         reply_markup=metabolism_gender_markup)

@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    name = message.from_user.full_name
    await commands.add_user(id=message.from_user.id,
                            name=name)

    result = str()
    link = await commands.select_link(id=1)

    channel = link.link
    chat = await bot.get_chat(channel)
    links = await chat.export_invite_link()
    print(links)
    for channel in channels:
        status = await subscription.check(user_id=message.from_user.id, channel=channel)
        channel = await bot.get_chat(link.link)
        if status:
            # result += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª <b>{channel.title}</b> –û—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π–≤—Å—Ç–∏—è",
                                      reply_markup=global_menu)
        else:
            await message.answer(result, disable_web_page_preview=True)
            channels_format = str()
           
	    for channel in channels:
                channel = link.link
                chat = await bot.get_chat(channel)
                invite_link = await chat.export_invite_link()
                channels_format += f"–ö–∞–Ω–∞–ª <a href='{invite_link}'>{chat.title}</a>\n\n"

            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª \n"
                         f"üëâ {channels_format}"
                         f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>'. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                         reply_markup=create_link(link=links),
                         disable_web_page_preview=True)

@dp.callback_query_handler(text="check_subs")
async def checker(call: types.CallbackQuery):
    await call.answer()
    result = str()
    link = await commands.select_link(id=1)
    for channel in channels:
        status = await subscription.check(user_id=call.from_user.id,
                                          channel=channel)
        channel = await bot.get_chat(link.link)
        if status:
            # result += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª <b>{channel.title}</b> –û—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            await call.message.edit_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π–≤—Å—Ç–∏—è",
                                 reply_markup=global_menu)
        else:
            await call.answer("–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ - –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–∏—Å–∞–Ω–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!",show_alert=True)
#    await call.message.edit_text(result, disable_web_page_preview=True, reply_markup=check_button)

# # @rate_limit(60, "metabolism")
# @dp.message_handler(Command("metabolism", prefixes="!/"), state=None)
# async def enter_test(message: types.Message):
#     await message.answer("–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—á–µ—Ç —Å–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ–±–º–µ–Ω–∞ –≤–µ—â–µ—Å—Ç–≤.\n"
#                          "–í–∞—à –ø–æ–ª?",
#                          reply_markup=metabolism_gender_markup)
#
#     # await Metabolism_state.gender.set()

@dp.callback_query_handler(target_callback.filter())
async def answer_gender(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)

    target = callback_data.get("value")
    await commands.update_user_target(target=target, id=call.from_user.id)
    user = await commands.select_user(id=call.from_user.id)
    description = callback_data.get("value")
    data = await state.get_data()
    m_id = data.get("m_id")
    await bot.delete_message(chat_id=call.from_user.id, message_id=m_id)
    mmm_id = await call.message.edit_text(f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
                                f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}")
    m2_id = mmm_id.message_id
    await state.update_data(m2_id=m2_id)


    await call.message.answer(f"<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:</b>", reply_markup=metabolism_activity_markup)

    # await Metabolism_state.weight.set()

@dp.callback_query_handler(gender_callback.filter())
# @dp.message_handler(state=Metabolism_state.gender)
async def answer_gender(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)

    gender = callback_data.get("value")
    await commands.update_user_gender(gender=gender, id=call.from_user.id)

    description = callback_data.get("description")
    await call.message.edit_text(
                                 f"<b>–í–∞—à –ø–æ–ª: {description}</b>\n")
    await call.message.answer(f"<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å</b>", reply_markup=metabolism_target_markup)
    await state.update_data(m_id=call.message.message_id)
    # await call.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", reply_markup=metabolism_activity_markup)
    # await Metabolism_state.age.set()


@dp.message_handler(state=Metabolism_state.age)
async def answer_age(message: types.Message, state: FSMContext):
    answer = message.text
    user = await commands.select_user(id=message.from_user.id)
    data = await state.get_data()
    m_id = data.get("m2_id")
    activ = data.get("activ")

    if answer.isdigit():
        await commands.update_user_age(age=int(answer), id=message.from_user.id)
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=m_id, text=
        f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
        f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}\n"
        f"<b>–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {activ}\n"
        f"<b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {message.text}</b>\n")
    else:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ !!!")
        return

    await message.answer(f"<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):</b>")
    await Metabolism_state.height.set()

@dp.message_handler(state=Metabolism_state.height)
async def answer_height(message: types.Message, state: FSMContext):
    answer = message.text
    print(answer)
    user =await commands.select_user(id=message.from_user.id)
    data = await state.get_data()
    m_id = data.get("m2_id")
    print(m_id)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=m_id, text=
                                 f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
                                 f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}\n"
                                 f"<b>–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {user.activity}\n"
                                 f"<b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {user.age}</b>\n"
                                 f"<b>–í–∞—à —Ä–æ—Å—Ç: {answer}</b>")
    if answer.isdigit():
        await commands.update_user_height(height=int(answer), id=message.from_user.id)
    else:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ !!!")
        return

    await message.answer(f"<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):</b>")
    await Metabolism_state.weight.set()


@dp.message_handler(state=Metabolism_state.weight)
async def answer_weight(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    user = await commands.select_user(id=message.from_user.id)
    m_id = data.get("m2_id")
    activ = data.get("activ")
    print(m_id)
    await bot.delete_message(chat_id=message.from_user.id, message_id=m_id)
    # await message.answer(
    #                             text=f"<b>–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π</b>\n\n"
    #                                  f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
    #                                  f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}\n"
    #                                  f"<b>–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {activ}\n"
    #                                  f"<b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {user.age}</b>\n"
    #                                  f"<b>–í–∞—à —Ä–æ—Å—Ç: {user.height}</b>\n"
    #                                  f"<b>–í–∞—à –≤–µ—Å: {message.text}</b>\n")


    if answer.isdigit():
        await commands.update_user_weight(weight=int(answer), id=message.from_user.id)
    else:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ !!!")
        return

    user = await commands.select_user(id=message.from_user.id)
    gender = user.gender  # –ø–æ–ª –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π
    age = user.age  # –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç
    height = user.height  # —Ä–æ—Å—Ç, —Å–º
    weight = user.weight # –≤–µ—Å, –∫–≥
    activity = float(user.activity)  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏


    result = metabolism_calculation(gender=gender, age=age, height=height, weight=weight, activity=activity)
    print(result)
    user = await commands.select_user(id=message.from_user.id)
    if user.target == "–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å":
        kkal = int(result) - 300
        prot = int(user.weight)*2
        fat = int(user.weight)*0.5
        ugleodi = int(user.weight)*2.2
    elif user.target == "–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å":
        kkal = int(result) + 400
        prot = int(user.weight) * 3.5
        fat = int(user.weight) * 1
        ugleodi = int(user.weight) * 3.2
    else:
        kkal = result
        prot = int(user.weight) * 2.5
        fat = int(user.weight) * 0.7
        ugleodi = int(user.weight) * 3.2
    await message.answer(f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
                         f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}\n"
                         f"<b>–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {activ}\n"
                         f"<b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b> {user.age}\n"
                         f"<b>–í–∞—à —Ä–æ—Å—Ç:</b> {user.height}\n"
                         f"<b>–í–∞—à –≤–µ—Å:</b> {message.text}\n\n"
                         f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>üëá\n\n"
                         f"<b>–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - </b>{kkal} <b>–ö–ö–∞–ª</b> \n\n"
                         f"<b>–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–ñ–£ –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏:</b>\n\n"
                         f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –±–µ–ª–∫–∞ - <b>{prot}</b> –≥—Ä–∞–º–º \n\n"
                         f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∂–∏—Ä–æ–≤ - <b>{fat}</b> –≥—Ä–∞–º–º\n\n"
                         f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤ - <b>{int(ugleodi)}</b> –≥—Ä–∞–º–º\n\n"
                         f"<code>–ù–∞–∂–º–∏—Ç–µ</code> /start <code> - –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é!</code>"
                         )
    await commands.update_user_kkal(id=message.from_user.id, kkal=int(kkal))

    await state.finish()





@dp.message_handler(state=Metabolism_state.age)
async def answer_age(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    m_id = data.get("m_id")
    if answer.isdigit():
        await commands.update_user_age(age=int(answer), id=message.from_user.id)
    else:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ !!!")
        return
    user = await commands.select_user(id=message.from_user.id)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=m_id,text=
                                 f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
                                 f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}\n"
                                 f"<b>–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {user.activity}"
                                 f"<b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {user.age}</b>")
    await Metabolism_state.height.set()
    # await state.finish()

@dp.callback_query_handler(activity_callback.filter())
# @dp.message_handler(state=Metabolism_state.activity)
async def answer_activity(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    user = await commands.select_user(id=call.from_user.id)
    coefficient = callback_data.get("coefficient")
    await commands.update_user_activity(activity=str(coefficient), id=call.from_user.id)
    description = callback_data.get("description")
    await state.update_data(activ=description)
    data = await state.get_data()
    m_id =  data.get("m2_id")
    print(m_id)
    await bot.edit_message_text(text=
                                 f"<b>–í–∞—à –ø–æ–ª:</b> {user.gender}\n"
                                 f"<b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {user.target}\n"
                                 f"<b>–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {description}",
                                 chat_id=call.from_user.id, message_id=m_id)
    await call.message.edit_text(f'<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b>')
    await Metabolism_state.age.set()
# description = callback_data.get("description")
#     await call.message.answer(text=f"{description}\n\n")
#     # –î–æ—Å—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
#     user = await commands.select_user(id=call.from_user.id)
#     # data = await state.get_data()
#     # gender = data.get("gender")  # –ø–æ–ª –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π
#     # age = data.get("age")  # –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç
#     # height = data.get("height")  # —Ä–æ—Å—Ç, —Å–º
#     # weight = data.get("weight")  # –≤–µ—Å, –∫–≥
#     # activity = data.get("activity")  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
# ###########
#     gender = user.gender  # –ø–æ–ª –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π
#     age = user.age  # –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç
#     height = user.height  # —Ä–æ—Å—Ç, —Å–º
#     weight = user.weight # –≤–µ—Å, –∫–≥
#     activity = float(user.activity)  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
#     print(gender)
#     print(age)
#     print(height)
#     print(weight)
#     print(activity)
#
#     result = metabolism_calculation(gender=gender, age=age, height=height, weight=weight, activity=activity)
#
#     await call.message.answer(f"–£–†–û–í–ï–ù–¨ –í–ê–®–ï–ì–û –ú–ï–¢–ê–ë–û–õ–ò–ó–ú–ê - {result} –ö–ö–∞–ª \n\n")
#
#     await state.finish()



@dp.callback_query_handler(text="cancel")
async def cancel_buying(call: CallbackQuery, state: FSMContext):
    # –û—Ç–≤–µ—Ç–∏–º –≤ –æ–∫–æ—à–∫–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º!
    await call.answer(f"–í—ã –Ω–µ —É–∑–Ω–∞–µ—Ç–µ –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ —Å–µ–±–µ {emojize(':thinking_face:')}", show_alert=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_reply_markup(reply_markup=None)

    await state.finish()
